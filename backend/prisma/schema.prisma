// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  VOLUNTEER
  ELDER
  ORGANIZER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

model User {
  user_id        Int       @id @default(autoincrement())
  email          String    @unique
  phone_number   String?   @unique
  password_hash  String @db.VarChar(255)
  role           UserRole  @default(USER)
  status         UserStatus @default(ACTIVE)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  profile        UserProfile?
  healthInfo     HealthInfo[]
  emergencyContacts EmergencyContact[]
  userInterests  UserInterest[]
  availability   VolunteerAvailability[]
  loginHistory   LoginHistory[]
  posts          Post[]
  communityPosts CommunityPost[] @relation("CommunityPostAuthor")
  communityComments CommunityComment[] @relation("CommunityCommentAuthor")
  communityLikes CommunityLike[] @relation("CommunityLikeUser")
  news           News[] @relation("NewsAuthor")
  activities     Activity[] @relation("ActivityAuthor")
  activityJoins  ActivityJoin[]
  volunteerSupports VolunteerSupport[]

  @@map("users")
}

model UserProfile {
  profile_id        Int     @id @default(autoincrement())
  user_id           Int     @unique
  full_name         String
  nickname          String?
  profile_image_url String?
  date_of_birth     DateTime?
  gender            String?
  address           String?
  user              User    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("user_profiles")
}

model HealthInfo {
  health_id  Int   @id @default(autoincrement())
  user_id    Int
  condition  String
  user       User  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("health_info")
}

model EmergencyContact {
  contact_id   Int   @id @default(autoincrement())
  user_id      Int
  name         String
  phone        String
  relationship String?
  user         User  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("emergency_contacts")
}

model Interest {
  interest_id Int    @id @default(autoincrement())
  name        String @unique
  users       UserInterest[]

  @@map("interests")
}

model UserInterest {
  user_id     Int
  interest_id Int
  user        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  interest    Interest @relation(fields: [interest_id], references: [interest_id], onDelete: Cascade)

  @@id([user_id, interest_id])
  @@map("user_interests")
}

model VolunteerAvailability {
  availability_id Int  @id @default(autoincrement())
  user_id         Int
  weekday         Int  // 0=Sunday .. 6=Saturday
  start_time      String
  end_time        String
  user            User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("volunteer_availability")
}

model LoginHistory {
  login_id    Int      @id @default(autoincrement())
  user_id     Int
  login_at    DateTime @default(now())
  ip_address  String?
  device_info String?
  user        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("login_history")
}

model Post {
  post_id       Int      @id @default(autoincrement())
  title         String
  description   String
  dateTime      DateTime
  reward        String?
  support_count Int      @default(0)
  created_at    DateTime @default(now())
  user_id       Int
  user          User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  supports      VolunteerSupport[]

  @@map("posts")
}

model VolunteerSupport {
  support_id   Int      @id @default(autoincrement())
  post_id      Int
  user_id      Int
  supported_at DateTime @default(now())
  
  post         Post     @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  
  @@unique([post_id, user_id])
  @@map("volunteer_supports")
}

// Community Posts - for neighborhood community posts
model CommunityPost {
  post_id        Int      @id @default(autoincrement())
  title          String
  content        String   @db.Text
  author_id      Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  is_published   Boolean  @default(true)
  view_count     Int      @default(0)
  like_count     Int      @default(0)
  comment_count  Int      @default(0)
  
  // Relations
  author         User              @relation("CommunityPostAuthor", fields: [author_id], references: [user_id], onDelete: Cascade)
  media          PostMedia[]
  comments       CommunityComment[]
  likes          CommunityLike[]
  
  @@map("community_posts")
}

// Media attachments for community posts
model PostMedia {
  media_id    Int           @id @default(autoincrement())
  post_id     Int
  file_url    String
  file_type   String        // 'image', 'video', 'document'
  file_name   String
  file_size   Int?          // in bytes
  mime_type   String?
  created_at  DateTime      @default(now())
  
  // Relations
  post        CommunityPost @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  
  @@map("post_media")
}

// Comments on community posts
model CommunityComment {
  comment_id  Int      @id @default(autoincrement())
  post_id     Int
  author_id   Int
  content     String   @db.Text
  parent_id   Int?     // for nested comments/replies
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  is_deleted  Boolean  @default(false)
  
  // Relations
  post        CommunityPost     @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  author      User              @relation("CommunityCommentAuthor", fields: [author_id], references: [user_id], onDelete: Cascade)
  parent      CommunityComment? @relation("CommentReplies", fields: [parent_id], references: [comment_id])
  replies     CommunityComment[] @relation("CommentReplies")
  
  @@map("community_comments")
}

// Likes on community posts
model CommunityLike {
  like_id     Int      @id @default(autoincrement())
  post_id     Int
  user_id     Int
  created_at  DateTime @default(now())
  
  // Relations
  post        CommunityPost @relation(fields: [post_id], references: [post_id], onDelete: Cascade)
  user        User          @relation("CommunityLikeUser", fields: [user_id], references: [user_id], onDelete: Cascade)
  
  @@unique([post_id, user_id])
  @@map("community_likes")
}

// News/Announcements model
model News {
  news_id       Int      @id @default(autoincrement())
  title         String
  content       String   @db.Text
  priority      String   @default("notice") // 'important', 'caution', 'notice'
  image_url     String?
  image_name    String?
  author_id     Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  is_published  Boolean  @default(true)
  view_count    Int      @default(0)
  date_time     String?  // For scheduled announcements
  disclaimer    String?  // Additional notes
  
  // Relations
  author        User     @relation("NewsAuthor", fields: [author_id], references: [user_id], onDelete: Cascade)
  
  @@map("news")
}

model Activity {
  activity_id    Int      @id @default(autoincrement())
  title          String
  description    String   @db.Text
  date           String
  time           String
  place          String
  location       String?
  latitude       Float?
  longitude      Float?
  capacity       Int      @default(1)
  joined         Int      @default(0)
  comments       Int      @default(0)
  views          Int      @default(0)
  image_url      String?
  image_name     String?
  author_id      Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  is_active      Boolean  @default(true)
  end_time       String?
  category       String?

  author         User           @relation("ActivityAuthor", fields: [author_id], references: [user_id], onDelete: Cascade)
  joins          ActivityJoin[]

  @@map("activities")
}

model ActivityJoin {
  join_id     Int      @id @default(autoincrement())
  activity_id Int
  user_id     Int
  joined_at   DateTime @default(now())

  activity    Activity @relation(fields: [activity_id], references: [activity_id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([activity_id, user_id])
  @@map("activity_joins")
}